import type { DataSources, Props, Scope } from "@webstudio-is/sdk";
type TransformIdentifier = (id: string, assignee: boolean) => string;
export declare const validateExpression: (code: string, options?: {
    /**
     * Enable assignment operator for actions
     */
    effectful?: boolean;
    /**
     * Add optional chaining to access nested properties safely
     * and without checks even when not exist
     */
    optional?: boolean;
    transformIdentifier?: TransformIdentifier;
}) => string;
export declare const encodeDataSourceVariable: (id: string) => string;
export declare const decodeDataSourceVariable: (name: string) => string | undefined;
type VariableName = string;
export declare const generateDataSources: ({ scope, typed, dataSources, props, }: {
    scope: Scope;
    typed?: boolean | undefined;
    dataSources: Map<string, {
        value: {
            value: number;
            type: "number";
        } | {
            value: string;
            type: "string";
        } | {
            value: boolean;
            type: "boolean";
        } | {
            value: string[];
            type: "string[]";
        } | {
            type: "json";
            value?: unknown;
        };
        type: "variable";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    } | {
        type: "parameter";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    }>;
    props: Map<string, {
        value: number;
        type: "number";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "string";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: boolean;
        type: "boolean";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        type: "json";
        name: string;
        id: string;
        instanceId: string;
        value?: unknown;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "asset";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: (string | {
            instanceId: string;
            pageId: string;
        }) & (string | {
            instanceId: string;
            pageId: string;
        } | undefined);
        type: "page";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string[];
        type: "string[]";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "parameter";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "expression";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: {
            code: string;
            type: "execute";
            args: string[];
        }[];
        type: "action";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    }>;
}) => {
    variables: Map<string, {
        valueName: VariableName;
        setterName: VariableName;
        initialValue: unknown;
    }>;
    body: string;
    output: Map<string, string>;
};
export {};
