import type { Page, Prop, Assets } from "@webstudio-is/sdk";
export type Pages = Map<Page["id"], Page>;
export declare const normalizeProps: ({ props, assetBaseUrl, assets, pages, }: {
    props: Prop[];
    assetBaseUrl: string;
    assets: Map<string, {
        type: "font";
        name: string;
        format: "ttf" | "woff" | "woff2" | "otf";
        meta: ({
            family: string;
            style: "normal" | "italic" | "oblique";
            weight: number;
        } | {
            family: string;
            variationAxes: Partial<Record<"wght" | "wdth" | "slnt" | "opsz" | "ital" | "GRAD" | "XTRA" | "XOPQ" | "YOPQ" | "YTLC" | "YTUC" | "YTAS" | "YTDE" | "YTFI", {
                name: string;
                min: number;
                default: number;
                max: number;
            }>>;
        }) & ({
            family: string;
            style: "normal" | "italic" | "oblique";
            weight: number;
        } | {
            family: string;
            variationAxes: Partial<Record<"wght" | "wdth" | "slnt" | "opsz" | "ital" | "GRAD" | "XTRA" | "XOPQ" | "YOPQ" | "YTLC" | "YTUC" | "YTAS" | "YTDE" | "YTFI", {
                name: string;
                min: number;
                default: number;
                max: number;
            }>>;
        } | undefined);
        id: string;
        projectId: string;
        size: number;
        description: string | null;
        createdAt: string;
    } | {
        type: "image";
        name: string;
        format: string;
        meta: {
            width: number;
            height: number;
        };
        id: string;
        projectId: string;
        size: number;
        description: string | null;
        createdAt: string;
    }>;
    pages: Pages;
}) => ({
    value: number;
    type: "number";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: string;
    type: "string";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: boolean;
    type: "boolean";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    type: "json";
    name: string;
    id: string;
    instanceId: string;
    value?: unknown;
    required?: boolean | undefined;
} | {
    value: string;
    type: "asset";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: (string | {
        instanceId: string;
        pageId: string;
    }) & (string | {
        instanceId: string;
        pageId: string;
    } | undefined);
    type: "page";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: string[];
    type: "string[]";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: string;
    type: "parameter";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: string;
    type: "expression";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
} | {
    value: {
        code: string;
        type: "execute";
        args: string[];
    }[];
    type: "action";
    name: string;
    id: string;
    instanceId: string;
    required?: boolean | undefined;
})[];
export declare const idAttribute: "data-ws-id";
export declare const selectorIdAttribute: "data-ws-selector";
export declare const componentAttribute: "data-ws-component";
export declare const showAttribute: "data-ws-show";
export declare const indexAttribute: "data-ws-index";
export declare const collapsedAttribute: "data-ws-collapsed";
export declare const getInstanceIdFromComponentProps: (props: Record<string, unknown>) => string;
export declare const getIndexWithinAncestorFromComponentProps: (props: Record<string, unknown>) => string | undefined;
